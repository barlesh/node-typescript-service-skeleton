import { Dispatcher, DispatcherRegisterOptions } from "@storex/core";
export interface ViewDispatcherRegisterOptions extends DispatcherRegisterOptions {
    onDispatch?: {
        pre?: Function;
        post?: Function;
    };
}
export declare type ViewTransform = (dispatchers: Dispatcher[] | {
    [key: string]: Dispatcher;
}, { context, oldData }: {
    context: any;
    oldData: any;
}) => any;
export declare type DispatcherOptions = (Dispatcher | ViewDispatcherRegisterOptions)[] | {
    [key: string]: Dispatcher;
} | {
    [key: string]: ViewDispatcherRegisterOptions;
};
export interface ViewArgs {
    meta?: any;
    status?: any;
    transform: ViewTransform;
    dispatchers: DispatcherOptions;
}
export interface ViewMeta {
}
export interface ViewStatus {
}
/**
 *
 *
 * @export
 * @class View
 */
export declare class View extends Dispatcher {
    _is_need_to_update: boolean;
    _transform: any;
    _sources: any;
    _unregisterFunc: any[];
    _data: any;
    _is_updating: boolean;
    context: any;
    constructor({ dispatchers, transform }: ViewArgs);
    data: any;
    _preAndPostUpdate: (options: ViewDispatcherRegisterOptions) => (eventsData: any, events: any) => void;
    update: () => void;
    destroy(): void;
}
export declare function createView(args: ViewArgs): View;
