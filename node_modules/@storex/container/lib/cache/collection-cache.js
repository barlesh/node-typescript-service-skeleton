"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const base_cache_1 = require("./base-cache");
const collection_1 = require("../collection");
class CollectionCache extends base_cache_1.BaseCache {
    constructor(args) {
        super(args);
        let itemToId;
        if (typeof args.id === "string") {
            itemToId = getID.bind(null, args.id);
        }
        else if (typeof args.id === "function") {
            itemToId = args.id;
        }
        else {
            throw new TypeError("[CollectionCache]:: the 'id' arg is in valid (should be string or function)");
        }
        this._itemToId = itemToId;
    }
    initData() {
        this.data = collection_1.createCollection({ itemToId: this._itemToId });
    }
    ;
    /**
     * set the cache
     *
     * @private
     * @returns
     * @memberof Cache
     */
    set(d) {
        return __awaiter(this, void 0, void 0, function* () {
            let len;
            if (d.data && d.length !== undefined) {
                const { data, length } = d;
                this.data.data = data;
                len = length;
            }
            else if (d instanceof Array) {
                this.data.data = d;
                len = d.length;
            }
            else {
                throw TypeError("[CollectionCache]:: receiving unknown data, only <array> or {data: <array>, length: <number>} is valid");
            }
            this.data.meta.length = len;
        });
    }
}
exports.CollectionCache = CollectionCache;
function getID(key_id, item) {
    return item[key_id];
}
