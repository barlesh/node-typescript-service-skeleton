/// <reference types="node" />
import { EventEmitter } from "events";
export interface BaseCacheArgs {
    delay?: number;
    getOnInit?: boolean;
    lazy?: boolean;
    lazyDelay?: number;
    name: string;
    getData?: () => Promise<object | Array<any>>;
    translateCache?: ({ preData, newData, roots }: {
        preData: any;
        newData: any;
        roots: any;
    }) => any;
    rootCaches?: BaseCache | {
        [key: string]: BaseCache;
    };
}
export interface IBaseCache {
    isNeedToUpdate: any;
    get(): any;
    remove(): any;
    set(data: any): any;
    needToUpdate(): any;
}
export declare abstract class BaseCache extends EventEmitter implements IBaseCache {
    protected _is_failed: any;
    protected _onUpdateOnce: any[];
    protected _isUpdating: boolean;
    protected _rootCaches?: BaseCache | {
        [key: string]: BaseCache;
    };
    protected _translateCache: any;
    protected _delay: any;
    protected _name: string;
    protected _lazy_delay: any;
    protected _lazy: any;
    protected _getData: any;
    protected _getOnInit: boolean;
    protected _labelCounts: {};
    protected _updatedDate: number;
    protected _changeDate: number;
    data: any;
    onChange: any;
    abstract set(data: any): any;
    abstract initData(): any;
    constructor(args: BaseCacheArgs);
    static init(): void;
    init: () => void;
    /**
     * get the cache
     *
     * @param {boolean} [asObject]
     * @returns
     * @memberof BaseCache
     */
    get(): Promise<any>;
    _registerToRoots: (roots: any) => void;
    readonly isNeedToUpdate: boolean;
    /**
     *
     *
     * @param {boolean} [asObject]
     * @returns
     * @memberof BaseCache
     */
    getCopy(): Promise<any>;
    /**
     * remove the cache
     *
     * @memberof BaseCache
     */
    remove(): Promise<void>;
    destructor(): void;
    /**
     * update that some changes are detected and cache need to be updated.
     *
     * @memberof BaseCache
     */
    needToUpdate: (msg?: any) => void;
    /**
     * update the cache
     *
     * @private
     * @returns
     * @memberof BaseCache
     */
    _get_and_set(): Promise<any>;
}
