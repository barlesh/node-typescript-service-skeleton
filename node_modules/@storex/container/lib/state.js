"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@storex/core");
const immutable_1 = require("immutable");
class State extends core_1.Dispatcher {
    constructor(_a) {
        var { defaultState, saveHistory } = _a, args = __rest(_a, ["defaultState", "saveHistory"]);
        super(args);
        this._is_need_to_updated = true;
        this._status = {};
        this._sentOnChange = () => this.state;
        if (saveHistory) {
            this._history = [];
            this._status_history = [];
        }
        this._save_history = saveHistory || false;
        this._state = immutable_1.fromJS(defaultState || {});
    }
    get state() {
        if (this._is_need_to_updated) {
            this._state_cache = this._state.toJS();
        }
        return this._state_cache;
    }
    set state(value) {
        const oldState = this._state;
        const newState = this._state.mergeDeep(value);
        if (this._save_history) {
            this._history.push(oldState);
        }
        this._state = newState;
        this._is_need_to_updated = true;
    }
    setState(args) {
        this.state = args;
    }
}
__decorate([
    core_1.dispatch()
], State.prototype, "state", null);
exports.State = State;
function createState(defaultState) {
    return new State({ defaultState });
}
exports.createState = createState;
