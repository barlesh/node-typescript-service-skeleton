"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@storex/core");
const collection_status_1 = require("./collection-status");
const collection_meta_1 = require("./collection-meta");
var DataGridEvents;
(function (DataGridEvents) {
    DataGridEvents["DataChange"] = "data-change";
    DataGridEvents["StateChange"] = "state-change";
    DataGridEvents["MetaChange"] = "meta-change";
})(DataGridEvents = exports.DataGridEvents || (exports.DataGridEvents = {}));
const e = DataGridEvents;
const _events = Object.keys(e);
class Collection extends core_1.Dispatcher {
    constructor({ meta, status, events = [], dependencies = [] }) {
        super({ events: [...events, ..._events], dependencies });
        this._itemsDir = {};
        this._items = [];
        this._is_items_need_to_render = true;
        this._is_view_items_need_to_render = true;
        this.get = id => {
            return this._itemsDir[id];
        };
        this.meta = meta;
        this.status = status;
    }
    addMany(items) {
        this.data = [...this.data, ...items];
    }
    add(item) {
        const id = this.meta.itemToId(item);
        this._itemsDir[id] = item;
        this._is_items_need_to_render = true;
    }
    remove(id) {
        if (this._itemsDir[id]) {
            delete this._itemsDir[id];
            this._is_items_need_to_render = true;
        }
    }
    update(item) {
        const id = this.meta.itemToId(item);
        if (this._itemsDir[id]) {
            this._itemsDir[id] = item;
            this._is_items_need_to_render = true;
        }
    }
    override(items) {
        this.data = items;
    }
    set data(value) {
        if (!(value instanceof Array)) {
            throw new TypeError("Data must to be Array");
        }
        this._items = value;
        if (this.meta.itemToId)
            this.generateDicItem();
    }
    get data() {
        if (this._is_items_need_to_render) {
            this._is_items_need_to_render = false;
            this._updateItemsFromItemDir();
        }
        return this._items;
    }
    set itemsAsObj(value) {
        this._itemsDir = value;
        this._is_items_need_to_render = true;
    }
    clean() {
        this.data = [];
    }
    get itemsAsObj() {
        return this._itemsDir;
    }
    generateDicItem() {
        for (const item of this._items) {
            let id = this.meta.itemToId(item);
            item.$id = id;
            this._itemsDir[id] = item;
        }
    }
    _updateItemsFromItemDir() {
        var _items = [];
        Object.keys(this._itemsDir).forEach(id => {
            _items.push(this._itemsDir[id]);
        });
        this._items = _items;
    }
}
__decorate([
    core_1.dispatch([e.DataChange])
], Collection.prototype, "addMany", null);
__decorate([
    core_1.dispatch([e.DataChange])
], Collection.prototype, "add", null);
__decorate([
    core_1.dispatch([e.DataChange])
], Collection.prototype, "remove", null);
__decorate([
    core_1.dispatch([e.DataChange])
], Collection.prototype, "update", null);
__decorate([
    core_1.dispatch([e.DataChange])
], Collection.prototype, "data", null);
__decorate([
    core_1.dispatch([e.DataChange])
], Collection.prototype, "itemsAsObj", null);
__decorate([
    core_1.dispatch([e.DataChange])
], Collection.prototype, "clean", null);
__decorate([
    core_1.dispatch([e.DataChange])
], Collection.prototype, "generateDicItem", null);
exports.Collection = Collection;
function createCollection({ itemToId }) {
    const meta = new collection_meta_1.CollectionMeta({ itemToId });
    const status = new collection_status_1.CollectionStatus();
    return new Collection({ meta, status });
}
exports.createCollection = createCollection;
