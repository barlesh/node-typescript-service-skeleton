import * as Ajv from "ajv";
export interface IBaseFilter {
    where: Where[];
}
export interface Where {
    key: string;
    path: string;
    value: string | Array<string> | any;
    type?: string;
    operator?: string;
}
export interface IFilterData extends IBaseFilter {
    sort?: {
        key: string;
        reverse: boolean;
    }[];
    itemPerPage?: number;
    page?: number;
}
export declare class BaseFilter implements IBaseFilter {
    private validatorFunc;
    where: Where[];
    constructor(filterData: IBaseFilter, validatorFunc: any);
    valid(): any;
}
export declare class FilterData extends BaseFilter implements IFilterData {
    sort: {
        key: string;
        reverse: boolean;
    }[];
    itemPerPage: number;
    page: number;
    constructor(filterData: IFilterData, validatorFunc?: any);
    /**
     * return the limitation data of the filter if itemPerPage and page was set.
     *
     * @returns
     * @memberof FilterData
     */
    readonly limitData: {
        from: number;
        to: number;
        limit: number;
    };
    valid(): any;
}
export declare function createFilterDataValidator(fields: any): Ajv.ValidateFunction;
export declare const sortSchema: (fields: any) => {
    id: string;
    type: string;
    properties: {
        key: {
            type: string;
            enum: any;
        };
        revers: {
            type: string;
        };
    };
};
export declare const whereSchema: (fields: any) => {
    id: string;
    type: string;
    properties: {
        key: {
            type: string;
            enum: any;
        };
        path: {
            type: string;
        };
        operator: {
            type: string;
            enum: string[];
        };
        value: {
            anyOf: ({
                type: string;
                items?: undefined;
            } | {
                type: string;
                items: {
                    type: string;
                };
            })[];
        };
        type: {
            type: string;
            enum: string[];
        };
    };
    required: string[];
};
