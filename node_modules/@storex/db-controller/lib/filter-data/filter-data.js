"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Ajv = require("ajv");
const defaultPage = 1;
const defaultItemPerPage = 1000;
class BaseFilter {
    constructor(filterData, validatorFunc) {
        this.validatorFunc = validatorFunc;
        this.where = filterData.where || [];
    }
    valid() {
        if (!this.validatorFunc) {
            throw new Error("validatorFunc not defined!!");
        }
        this.validatorFunc(this);
        return this.validatorFunc.errors;
    }
}
exports.BaseFilter = BaseFilter;
class FilterData extends BaseFilter {
    constructor(filterData, validatorFunc) {
        super(filterData, validatorFunc);
        this.page = filterData["page"] || defaultPage;
        this.itemPerPage = filterData["itemsPerPage"]; // || defaultItemPerPage;
        this.sort = filterData["sort"] || [];
    }
    /**
     * return the limitation data of the filter if itemPerPage and page was set.
     *
     * @returns
     * @memberof FilterData
     */
    get limitData() {
        if (this.itemPerPage && this.page) {
            return {
                from: this.itemPerPage * (this.page - 1),
                to: this.itemPerPage * this.page,
                limit: this.itemPerPage
            };
        }
    }
    valid() {
        const error = super.valid();
        return error;
    }
}
exports.FilterData = FilterData;
function createFilterDataValidator(fields) {
    const v = new Ajv();
    const filterDataSchema = createSchema(fields);
    const validFilterDataFunc = v.compile(filterDataSchema);
    return validFilterDataFunc;
}
exports.createFilterDataValidator = createFilterDataValidator;
/////////////////////////////
exports.sortSchema = fields => ({
    id: "#sort",
    type: "object",
    properties: {
        key: {
            type: "string",
            enum: fields
        },
        revers: {
            type: "boolean"
        }
    }
});
const filterTypes = ["string", "number", "bool", "boolean", "enum", "array"];
exports.whereSchema = fields => ({
    id: "#where",
    type: "object",
    properties: {
        key: {
            type: "string",
            enum: fields
        },
        path: { type: "string" },
        operator: { type: "string", enum: ["<", ">", "!", "=", "~", "!~"] },
        value: {
            anyOf: [
                { type: "string" },
                { type: "number" },
                { type: "boolean" },
                { type: "array", items: { type: "string" } },
                { type: "array", items: { type: "number" } }
            ]
        },
        type: {
            type: "string",
            enum: filterTypes
        }
    },
    required: ["key", "value"]
});
function createSchema(fields) {
    const _sortSchema = exports.sortSchema(fields);
    const _whereSchema = exports.whereSchema(fields);
    const filterDataSchema = {
        id: "#filterData",
        type: "object",
        properties: {
            sort: {
                type: "array",
                items: _sortSchema
            },
            where: {
                type: "array",
                item: _whereSchema
            },
            itemPerPage: { type: "integer", minimum: 1 },
            page: { type: "integer", minimum: 0 }
        },
    };
    return filterDataSchema;
}
