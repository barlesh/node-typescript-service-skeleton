"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const mongodb_1 = require("mongodb");
class Mongo {
    constructor(_url) {
        this._url = _url;
        this._tryToConnect = false; // if someone try to connect.
        this._notifyWhenConnectingList = [];
        this.close = () => __awaiter(this, void 0, void 0, function* () {
            if (this._db) {
                yield this._db.close();
                this._db = undefined;
            }
        });
        this.connect = () => __awaiter(this, void 0, void 0, function* () {
            this._tryToConnect = true;
            const db = yield mongodb_1.MongoClient.connect(this._url);
            this._tryToConnect = false;
            this._notifyWhenConnectingList.forEach(f => {
                if (typeof f === 'function') {
                    f(db);
                }
            });
            this._notifyWhenConnectingList = [];
            console.log('mongo is connected');
            db.on('close', () => {
                console.log('mongo connection closed');
            });
            return db;
        });
        this.getDb = () => __awaiter(this, void 0, void 0, function* () {
            if (!this._db && !this._tryToConnect) {
                this._db = yield this.connect();
            }
            else if (this._tryToConnect) {
                return new Promise((resolve, reject) => {
                    this._notifyWhenConnectingList.push(db => {
                        resolve(db);
                    });
                });
            }
            else {
                return this._db;
            }
        });
        this.dropDatabase = () => __awaiter(this, void 0, void 0, function* () {
            yield this.getDb(); // get the db
            yield this._db.dropDatabase();
        });
        this.dropCollection = (collectionName) => __awaiter(this, void 0, void 0, function* () {
            const collection = yield this.getCollection(collectionName); // get the collection.
            yield collection.insert({ addSpam: 'this is spam to create the collection if not existed before' });
            yield collection.drop();
        });
        this.getCollection = (collectionName) => __awaiter(this, void 0, void 0, function* () {
            yield this.getDb();
            const collection = yield this._db.collection(collectionName);
            return new Promise((resolve, reject) => {
                resolve(collection);
            });
        });
    }
}
exports.Mongo = Mongo;
