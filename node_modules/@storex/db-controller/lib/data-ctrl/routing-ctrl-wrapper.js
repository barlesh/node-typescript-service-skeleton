"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Ajv = require("ajv");
class RoutingCtrlWrapper {
    constructor({ data, modelName, modelsName, validation, modelSchema, filterValidation }) {
        this.connectRouter = (router) => {
            // todo...
        };
        this.data = data;
        this.modelName = modelName;
        this.modelsName = modelsName;
        this.modelSchema = modelSchema;
        this.filterValidation = filterValidation;
        if (validation) {
            this._validation = validation;
        }
        else if (modelSchema) {
            const v = new Ajv();
            const _validation = v.compile(modelSchema);
            this._validation = m => {
                _validation(m);
                return _validation.errors;
            };
        }
        // bind the function to this
        this.remove = this.remove.bind(this);
        this.add = this.add.bind(this);
        this.update = this.update.bind(this);
        this.get = this.get.bind(this);
        this.getMany = this.getMany.bind(this);
        this.addMany = this.addMany.bind(this);
        this.removeMany = this.removeMany.bind(this);
        this.getManyByFilter = this.getManyByFilter.bind(this);
    }
    _getAndValidIDs(req, res, canBeEmpty = false) {
        const id = req.body.ids;
        if (!id && !canBeEmpty) {
            res.status(400).send({ msg: "IDs are empty" });
            return false;
        }
        return id;
    }
    ;
    _getAndValidFilter(req, res, canBeEmpty = false) {
        const id = req.body.ids;
        if (!id && !canBeEmpty) {
            res.status(400).send({ msg: "ID is empty" });
            return false;
        }
        return id;
    }
    ;
    _getAndValidID(req, res, canBeEmpty = false) {
        const id = req.params.id;
        if (!id && !canBeEmpty) {
            res.status(400).send({ msg: "ID is empty" });
            return false;
        }
        return id;
    }
    ;
    _getAndValidModels(req, res, canBeEmpty = false) {
        const models = req.body;
        if (!models && !canBeEmpty) {
            res.status(400).send({ msg: "Not valid ID" });
            return false;
        }
        else if (!models) {
            return;
        }
        for (const model of models) {
            if (this._isModelValid(model, req, res) == false) {
                return false;
            }
        }
        return models;
    }
    ;
    _getAndValidModel(req, res, canBeEmpty = false) {
        const model = req.body;
        if (!model && !canBeEmpty) {
            res.status(400).send({ msg: "Not valid ID" });
            return false;
        }
        else if (!model) {
            return;
        }
        if (this._isModelValid(model, req, res) === false) {
            return false;
        }
        return model;
    }
    ;
    _isModelValid(m, req, res) {
        let err;
        if (this._validation) {
            err = this._validation(m);
        }
        if (err) {
            res.status(400).send({ msg: "Not valid Body data", err });
            return false;
        }
    }
    ;
    _failed({ err, msg, res }) {
        res.status(400).send({ msg, err });
    }
    ;
    get(req, res) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const id = yield this._getAndValidID(req, res);
                if (id == false) {
                    return status;
                }
                const result = yield this.data.get(id);
                res.send(result);
                return status;
            }
            catch (err) {
                this._failed({ err, res, msg: "Failed to get data" });
            }
        });
    }
    ;
    add(req, res) {
        return __awaiter(this, void 0, void 0, function* () {
            const status = { success: false, errMsg: "", data: { model: {} } };
            try {
                const model = yield this._getAndValidModel(req, res);
                if (model == false) {
                    return status;
                }
                yield this.data.add(model);
                status.data.model = model;
                status.success = true;
                return status;
            }
            catch (err) {
                status.errMsg = err;
                return status;
            }
        });
    }
    ;
    remove(req, res) {
        return __awaiter(this, void 0, void 0, function* () {
            const status = { success: false, errMsg: "", data: { ids: "" } };
            try {
                const removeId = this._getAndValidID(req, res);
                if (removeId == false) {
                    return status;
                }
                yield this.data.remove(removeId);
                status.data.ids = removeId;
                status.success = true;
                return status;
            }
            catch (err) {
                status.errMsg = err;
                return status;
            }
        });
    }
    ;
    update(req, res) {
        return __awaiter(this, void 0, void 0, function* () {
            const status = { success: false, errMsg: "", data: { model: {} } };
            try {
                const model = this._getAndValidModel(req, res);
                if (model == false) {
                    return status;
                }
                yield this.data.update(model);
                status.data.model = model;
                status.success = true;
                return status;
            }
            catch (err) {
                status.errMsg = err;
                return status;
            }
        });
    }
    ;
    getMany(req, res) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const ids = this._getAndValidIDs(req, res, true);
                if (!ids == false) {
                    return;
                }
                const result = yield this.data.getMany(ids);
                res.send(result);
            }
            catch (err) {
                this._failed({ err, res, msg: "Failed to get data" });
            }
        });
    }
    ;
    addMany(req, res) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const models = this._getAndValidModels(req, res);
                if (models == false) {
                    return;
                }
                yield this.data.addMany(models);
                res.send({ msg: "added" });
            }
            catch (err) {
                this._failed({ err, res, msg: "Failed to add data" });
            }
        });
    }
    ;
    removeMany(req, res) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const ids = this._getAndValidIDs(req, res);
                if (!ids) {
                    return;
                }
                const result = yield this.data.removeMany(ids);
                res.send(result);
            }
            catch (err) {
                this._failed({ err, res, msg: "Failed to remove data" });
            }
        });
    }
    ;
    getManyByFilter(req, res) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const filter = this._getAndValidFilter(req, res);
                if (filter == false) {
                    return;
                }
                yield this.data.getManyByFilter(filter);
                res.send({ msg: "updated" });
            }
            catch (err) {
                this._failed({ err, res, msg: "Failed to get by filter" });
            }
        });
    }
    ;
}
exports.RoutingCtrlWrapper = RoutingCtrlWrapper;
