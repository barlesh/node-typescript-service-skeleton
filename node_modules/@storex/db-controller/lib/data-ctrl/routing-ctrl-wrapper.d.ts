import { Request, Response } from "express";
import { ModelOptionsCtrl, ModelOptionsData } from "../data-access";
export interface CtrlStatus {
    success: boolean;
    data: any;
    errMsg: string;
}
export declare class RoutingCtrlWrapper<T = any> implements ModelOptionsCtrl {
    data: any;
    modelName: any;
    modelsName: any;
    _validation: any;
    modelSchema: any;
    filterValidation: any;
    constructor({ data, modelName, modelsName, validation, modelSchema, filterValidation }: {
        data: ModelOptionsData<T>;
        modelName: string;
        modelsName: string;
        modelSchema?: any;
        validation?: any;
        filterValidation?: any;
    });
    connectRouter: (router: any) => void;
    _getAndValidIDs(req: any, res: any, canBeEmpty?: boolean): any;
    _getAndValidFilter(req: any, res: any, canBeEmpty?: boolean): any;
    _getAndValidID(req: any, res: any, canBeEmpty?: boolean): any;
    _getAndValidModels(req: any, res: any, canBeEmpty?: boolean): any;
    _getAndValidModel(req: any, res: any, canBeEmpty?: boolean): any;
    _isModelValid(m: any, req: any, res: any): boolean;
    _failed({ err, msg, res }: {
        err: any;
        msg: any;
        res: any;
    }): void;
    get(req: Request, res: Response): Promise<string>;
    add(req: Request, res: Response): Promise<any>;
    remove(req: Request, res: Response): Promise<any>;
    update(req: Request, res: Response): Promise<CtrlStatus>;
    getMany(req: Request, res: Response): Promise<void>;
    addMany(req: Request, res: Response): Promise<CtrlStatus>;
    removeMany(req: Request, res: Response): Promise<void>;
    getManyByFilter(req: Request, res: Response): Promise<void>;
}
